{% extends 'index' %}

{% block 'main' %}
{% include 'page_head' %}
{% block 'subnav' %}
{% include 'subnav_depth_1' %}
{% endblock %}

#main-generic
  {% block 'left' %}
  %section#container-sidebar
    :markdown
      <div class="alert alert-info">
      You can find the source of the Liquid template engine on **[github.][]** However, we used an **[enhanced version][]** of the original engine.
      </div>
      
      # It was crafted for very specific requirements:

      - It has to have simple markup and beautiful results Template engines which don’t produce good looking results are no fun to use.            
      - It needs to be non-evaling and secure. Liquid templates are made so that users can edit them. You don’t want to run code on your server which your users wrote.   
      - It has to be stateless. The compile and render steps have to be separate, so that the expensive parsing and compiling can be done once; later on, you can just render it by passing in a hash with local variables and objects.
      - It needs to be able to style emails as well as HTML.

      # Objects

      When writing a liquid template, you will access to a couple of objects representing for instance the current site, page, logged in account as well as collections such as your custom content types. We also call them **drops** in case you meet this word further in the documentation.

      {% raw %}
          {{ page.title }}
      {% endraw %}
      
      **Example:** it displays the title of the current page.

      <div class="alert alert-info">
      **Note:** matched pairs of curly brackets are used to output the value of an object
      </div>

      # Filters

      You can modify the output by using filters that you can chain. Filters are simple methods. The first parameter is always the output of the left side of the filter. The return value of the filter will be the new left value when the next filter is run. When there are no more filters, the template will receive the resulting string.

      {% raw %}
          {{ page.title | upcase | pluralize }}
      {% endraw %}
      
      **Example:** it displays the title of the current page and applies 2 transformations: upcase + pluralization

      # Tags

      Tags are used for the logic in the templates making them very dynamic. Thus, you can loop through a collection with the **for** tag, test a variable with the classical **if/else.** We also added, to the original Liquid tags, our own tags in order to build pages more elegantly and more efficiently.

      {% raw %}
          {% if content_types.projects.size == 0 %}
          <p>No projects</p>
          {% endif %}
      {% endraw %}

      **Example:** Check if our custom content type representing projects has entries or not.

      {% raw %}
          {% nav %}
      {% endraw %}
      
      **Example:** it displays the main menu of the current site with the UL/LI html tags.

      <div class="alert alert-info">
      **Note:** matched pairs of curly brackets and percent signs are used to call a tag.
      </div>
  {% endblock %}

{% endblock %}