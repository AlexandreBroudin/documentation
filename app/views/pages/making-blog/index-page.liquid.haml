---
title: The index page
listed: true
position: 4
---
{% extends 'index' %}

{% block 'content' %}

:markdown
  ### Our new home page

  Ok, let's replace our generic Bootstrap home page with the real home page of our blog. Open the `app/pages/index.liquid` file and delete all of its contents. Paste in the following code.

  <script src="https://gist.github.com/youroff/7411916.js"></script>
  
  We're going to go through this page line by line, but for now let's see what this looks like. Open a command line and navigate to the project directory. Let's again turn on Wagon's web server by running `bundle exec wagon serve`. Leave the server running and open [http://0.0.0.0:3333](http://0.0.0.0:3333) in your browser. You should see a page like the one below.

  <img src="{{ 'guides/making-blog/new_home_page.jpg' | theme_image_url }}" alt="Our new home page" />

  ### The YAML header
  Back in your text editor, let's walk through this file. The first thing you will notice is the YAML header at the top of the file.

      ---
      title: Home
      published: true
      ---
  
  The YAML header is surrounded by a pair of triple dashes and contains YAML that set's various properties for the page. This page sets just two options: `title` and `published`. As you can probably guess, `title` set's the page's title and `published` is a boolean flag that determines whether this page should be publicly accessible by anyone, of if the page is still under review and should only be accessible to site editors.

  Aside from the two properties above, there are around a dozen other properties that can be specified, but we'll come back to these later.

  ### Output markup and droplets
  After some boilerplate HTML, the next interesting part comes in the title tag, when we encounter our first piece of [Liquid Markup](http://liquidmarkup.org/). Liquid Markup, originally created by the good folks at [Shopify](http://www.shopify.com), is one of Ruby's most popular templating language.

  We first encounter Liquid's _output markup_, which is demarcated by pairs of double curly brackets. Output markup outputs whatever is between the brackets. 

      {% raw %}{{ page.title }} - {{ site.name }}{% endraw %}

  The above code first outputs the variable `page.title`, which comes from the `title` property set in this page's YAML header. LocomotiveCMS automatically loads all of the YAML header values for a page into the `page` _droplet_. Programmers can think of Liquid droplets like objects or hashes. If that doesn't make sense to you, droplets are collections of related variables. You can access a droplet's variables by putting a period after the droplet name, followed by the variable's name.

  The above liquid next outputs the site's name, as set in the `config/site.yml` file. This time the variable is stored in the `site` droplet. Together, the result is: _Home - Wisdom for Wanderers_.

  That's pretty  easy to understand, but some may be wondering why we don't just put that text into this page directly and avoid all this Liquid markup business? Good question. The first reason is that, as you may remember from [section 1.3](1.3-Deploying to the Engine.html), the `name` property in `config/site.yml` and the `title` property in `app/pages/index.liquid`'s YAML header are editable through the LocomotiveCMS back-office. That means that site editors can then change these values at anytime using the back-office's GUI.

  The second reason is that `index.liquid` is not just page; thanks to LocomotiveCMS's page inheritance system, it also serves as a template for child pages. As such, the value of the `<title>` tag can't be a static value, but instead needs to change on a page by page basis. We'll come back to this later.

  ### Liquid tags
  Now for some sites, the above might be all we need in the title tag. But for SEO purposes, I would really like to the use a few more keywords in the title tag.

      {% raw %}{% if page.seo_title %}{{ page.seo_title }}{% else %}{{ site.seo_title }}{% endif %}{% endraw %}

  Here we are introduced to Liquid's second type of markup: _tag markup_. Liquid tags are indicated with paired curly brackets and percentage signs. 

  Liquid tags can perform all kinds of functions, but here we have a simple if statement: output the variable `page.seo_title` if it exists. Otherwise, output the variable `site.seo_title`. We didn't define a `seo_title` property in this page's YAML header, so `page.seo_title` doesn't exist, which means that the `seo_title` property defined in `config/site.yml` will be output instead. This let's us add keywords to the title on a page by page basis. When we don't define page specific title keywords, it falls back to the site-wide title keywords.

  Putting it all together, this page's title will be _Home - Wisdom for Wanderers | Travel Tips for the Adventurous!_

  After the title tag, we have some more Liquid markup that should look familiar now: it uses the page's `meta_description` if it exists and otherwise falls back to the site's `meta_description`.
    
      {% raw %}<meta name="description" content="{% if page.meta_description %}{{ page.meta_description }}{% else %}{{ site.meta_description }}{% endif %}">{% endraw %}

  Next come the site's and page's keywords.

      {% raw %}<meta name="keywords" content="{{ site.meta_keywords }} {{ page.meta_keywords }}">{% endraw %}

  Here both the site's keywords and the page's keywords are shown. If either one isn't defined, Liquid will simply output nothing for those statements.

  ### Liquid filters
  After a standard viewport meta tag, we encounter this interesting bit including a Liquid filter. 

      {% raw %}{{ 'bootstrap.css' | stylesheet_tag }}{% endraw %}

  Liquid filters come after a pipe character inside output markup and in someway modify what comes before the pipe character. Here, the `stylesheet_tag` filter takes the name of a CSS file in the `public/stylesheets` directory and creates a link tag for that stylesheet. But this isn't just a time saving shortcut. It's actually necessary due to the way LocomotiveCMS handles assets. If you preview this page using Wagon's web server and view the source, you'll see the above Liquid becomes:

      <link href="/stylesheets/bootstrap.css" media="screen" rel="stylesheet" type="text/css" />

  But if you were to deploy this site to an Engine and view the source, it would look something like this:

      <link href="/sites/52759abbb5f1c932fe000002/theme/stylesheets/bootstrap.css" media="screen" rel="stylesheet" type="text/css">

  For this reason, when you link to assets in your templates, we use Liquid filters, like this one, to create the URL. What if we want to change the value of media? The `stylesheet_tag` filter actually takes a _media_ argument we can use to set it like below.

      {% raw %}{{ 'bootstrap.css' | stylesheet_tag: media: "screen, print" }}{% endraw %}

  Another solution might be to use a completely different filter, `stylesheet_url`, like this:

      {% raw %}<link href="{{ 'bootstrap.css' | stylesheet_url }}" media="screen, print" rel="stylesheet" type="text/css">{% endraw %}

  Of course, Liquid filters can do way more than just modify URLs. Let's explore some other filters. You can put these experiments in `index.liquid` below the "Coming soon" text and test the results with the Wagon web server.

  Filters can modify strings.

      {% raw %}{{ 'test' | capitalize }}{% endraw %}
  Outputs: `Test`

  Filters can also modify variables.

      {% raw %}{{ page.title | upcase }}{% endraw %}
  Outputs: `HOME`

  Filters can accepts arguments:

      {% raw %}{{ site.name | truncate: 10 }}{% endraw %}
  Outputs: `Wisdom ...`
  
  Filters can accept mulitple arguments.

      {% raw %}{{ site.name | truncate: 8, "---" }}{% endraw %}
  Outputs: `Wisdo---`

  Filters can modify numbers.

      {% raw %}{{ 8 | plus: 10 }}{% endraw %}
  Outputs: `18`

  Filters can by strung together.

      {% raw %}{{ "MY NAME IS TOM" | dasherize | downcase }}{% endraw %}
  Outputs: `my-name-is-tom`

  Pretty neat, huh? Liquid comes with a good set of filters and LocomotiveCMS has added more on top of that. You can see a list of all the filters and what they do using [Liquid's Documentation](https://github.com/Shopify/liquid/wiki/Liquid-for-Designers) and [LocomotiveCMS's Template Reference](http://doc.locomotivecms.com/references).

  ### Finishing up

  There's only one more Liquid tag in the page, but I'll let you find it on your own. If you're not sure what it does, be sure to consult [LocomotiveCMS's Template Reference](http://doc.locomotivecms.com/references).

  Let's commit our pages to the git repository.

      $ git commit -am "Customized the home page."

  Alright, the home page is complete. We still have a long way to go on our blog, but the pace will really pick up from here.

{% endblock %}