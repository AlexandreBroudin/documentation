---
title: Create a site template
listed: true
---
{% extends index %}

{% block content %}

:markdown

  # Listing the existing site templates

      wagon list_templates

  By default, Wagon includes two site templates.

  <table>
    <thead>
      <tr>
        <th>Name</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>blank</td>
        <td>this is the default template, very minimal. No javascripts, no stylesheets, just the index / 404 pages</td>
      </tr>
      <tr>
        <td>bootstrap2</td>
        <td>includes all the files provided by the Twitter Bootstrap package (v2.3.2) as well as the index / 404 pages</td>
      </tr>
      <tr>
        <td>bootstrap3</td>
        <td>includes all the files provided by the Twitter Bootstrap package (v3.0.0) as well as the index / 404 pages</td>
      </tr>
      <tr>
        <td>foundation</td>
        <td>includes all the files provided by the Zurb Foundation package (v4.3.2) as well as the index / 404 pages</td>
      </tr>
    </tbody>
  </table>

  # Assigning a site template when creating a new site

      wagon init my_first_site -t bootstrap2

  or

      wagon init my_first_site --template=bootstrap2

  # Coding your site template

  <div class="alert alert-warning">
    It only works from the <strong>1.4.0 version</strong> of Wagon.
  </div>

  It requires some Ruby skills but no so much. Do not worry, we are going
  to guide you step by step by developing an example.

  ## 1. Prepare your environment

      cd ~/workspace

      mkdir -p wagon_generators/my_template
      mkdir -p wagon_generators/my_template/app/content_types
      touch wagon_generators/my_template/app/content_types/.empty_directory
      mkdir -p wagon_generators/my_template/app/views/pages
      touch wagon_generators/my_template/app/content_types/.empty_directory
      mkdir -p wagon_generators/my_template/app/views/snippets
      touch wagon_generators/my_template/app/content_types/.empty_directory

      mkdir -p wagon_generators/my_template/public/images
      touch wagon_generators/my_template/public/images/.empty_directory
      mkdir wagon_generators/my_template/public/javascripts
      touch wagon_generators/my_template/public/javascripts/.empty_directory
      mkdir wagon_generators/my_template/public/stylesheets
      touch wagon_generators/my_template/public/stylesheets/.empty_directory

  <div class="alert alert-info">
    The <strong>.empty_directory</strong> file forces the generator to create the parent folder when generating the site.
  </div>

  ## 2. Define your template in Ruby

      mate wagon_generators/my_template.rb

  Fill in with the following Ruby code:

      class MyTemplate < Locomotive::Wagon::Generators::Site::Base

        def self.source_root
          File.join(File.dirname(__FILE__), 'foo')
        end

      end

      Locomotive::Wagon::Generators::Site.register(:my_template, MyTemplate, %{
        A simple example of a site generator.
      })

  <div class="alert alert-info">
    Behind the scene, <strong>Wagon</strong> uses <a href="https://github.com/erikhuda/thor/wiki/Generators">Thor</a> to power the generation of sites.
  </div>

  <div class="alert alert-info">
    You will find more complex samples <strong><a href="https://github.com/locomotivecms/wagon/tree/master/lib/locomotive/wagon/generators/site">here</a></strong>.
  </div>

  ## 3. Edit your site

  All you have to do is to populate your site by copying your existing stylesheets, javascripts, pages …etc to their target folders inside the template folder.

  For instance, if you want to tweak your index page:

      mate wagon_generators/my_template/app/views/pages/index.liquid.haml

  <div class="alert alert-info">
    More examples of file templates <strong><a href="https://github.com/locomotivecms/wagon/tree/master/generators">here</a></strong>.
  </div>

  ## 4. Using your template

  Let’s see if your template is now part of the available site templates. You should see “my\_template”

      wagon list_templates --lib=./wagon_generators/my_template.rb

  Here is the command to create a new Wagon site with your new
  template:

      wagon init another_site --template=my_template --lib=./wagon_generators/my_template.rb

{% endblock %}