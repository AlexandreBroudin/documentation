---
title: Guides
published: true
listed: true
position: 1
editable_elements:
  main/page_head_title: "All the guides"
  main/page_head_content: "<p>Get on the rails of LocomotiveCMS. Everything you need to know to make the coolest sites is here.</p>"
---
{% extends 'index' %}

{% block 'main' %}
{% include 'page_head' %}

{% assign depth = path | split: '/' | size %}

{% if depth > 2 %}
{% include 'subnav_depth' with depth: 1 %}
{% endif %}

#main-generic
  {% block 'left' %}
  %section#container-sidebar
    {% block 'content' %}
    
    %h1 Getting Started
    %p Install and run your first LocomoticeCMS site by following these steps:
    
    %ul
      %li
        %a{ :href => "/guides/getting-started/requirements" }
          Requirements
        %p You will require a few things to be installed on your system before you get started : Ruby, Ruby On Rails, Mongodb and Imagemagick.
      %li
        %a{ :href => "/guides/getting-started/install-builder" }
          Installing the LocomotiveCMS Builder
        %p The builder is THE command line tool that allows you to develop locally.
      %li
        %a{ :href => "/guides/getting-started/create-your-first-site" }
          Create your first site
      %li
        %a{ :href => "/guides/getting-started/install-engine" }
          Installing the engine
        %p LocomotiveCMS runs on a Ruby On Rails site. Follow the instructions to install Ruby On Rails and create your first site.
      %li
        %a{ :href => "/guides/getting-started/development-workflow" }
          The ideal development workflow

    %h1 Content types

    %ul
      %li
        %a{ :href => "guides/content-types/create" }
          Create a content type
      %li
        %a{ :href => "guides/content-types/listing" }
          List content entries on a page
        %p Including how to paginate entries, scope your result, display grouped by.
      %li
        %a{ :href => "guides/content-types/template" }
          Create a template for a content entry
      %li
        %a{ :href => "guides/content-types/translate" }
          Manage content entries translations
      %li
        %a{ :href => "guides/content-types/customize-backoffice" }
          Customize the backoffice user interface
      %li
        %a{ :href => "guides/content-types/relationships" }
          Create relationships
      %li
        %a{ :href => "guides/content-types/public-form-submission" }
          Using public form submissions
        %p Create a contact form, store the messages and receive emails.

    %h1 How assets work
    %p Discover how you manage your images, stylesheets, javascripts...
    
    %ul
      %li
        %a{ :href => "guides/assets/adding-assets" }
          Adding assets
      %li
        %a{ :href => "guides/assets/sass" }
          Using Sass

    %h1 Multilingual

    %ul
      %li
        %a{ :href => "/guides/multilingual/setup" }
          Set up multilingual
        %p Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras vitae ante sit amet mi vehicula suscipit.

      %li
        %a{ :href => "/guides/multilingual/templates" }
          Multiple templates
        %p Create a different template for each language, or create one template and manage translations.


      %li
        %a{ :href => "/guides/multilingual/add-language" }
          Add another language
        %p Create a different template for each language, or create one template and manage translations.

      %li
        %a{ :href => "/guides/content-types/translate" }
          Translated content entries
        %p Manage content entries translations

    %ul
      %li
        %a{ :href => "/guides/heroku-hosting" }
          Heroku hosting
        %p Setting up LocomotiveCMS hosting on Heroku is very handy.

    %h1 Multisite

    %ul
      %li
        %a{ :href => "/guides/multi-sites" }
          Setup multisites
        %p Manage multiple sites with one LocomotiveCMS installation.

    / %h1 Guides summary

    / {% assign path_segments = path | split: '/' %}

    / {% for child in page.children %}
    / %ul
    /   %li
    /     %a{ :href => "{{ fullpath }}/{{ child.slug }}", :class => "{% if child.slug == path_segments[1] %}current{% endif %}" }
    /       {{ child.title }}
    /     {% if child.children %}
    /     %ul
    /       {% for grand_child in child.children %}
    /       %li
    /         %a{ :href => "/{{ grand_child.fullpath }}" }
    /           {{ grand_child.title }}
    /       {% endfor %}
    /     {% endif %}
    / {% endfor %}
    {% endblock %}
  {% endblock %}
  {% block 'sidebar' %}{% endblock %}

{% endblock %}
